/*
 * This file is generated by jOOQ.
 */
package meta.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import meta.Indexes;
import meta.Keys;
import meta.Public;
import meta.tables.records.MailingListRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MailingList extends TableImpl<MailingListRecord> {

    private static final long serialVersionUID = 1324505094;

    /**
     * The reference instance of <code>public.mailing_list</code>
     */
    public static final MailingList MAILING_LIST = new MailingList();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MailingListRecord> getRecordType() {
        return MailingListRecord.class;
    }

    /**
     * The column <code>public.mailing_list.id</code>.
     */
    public final TableField<MailingListRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('mailing_list_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.mailing_list.affiliation</code>.
     */
    public final TableField<MailingListRecord, String> AFFILIATION = createField("affiliation", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.mailing_list.email</code>.
     */
    public final TableField<MailingListRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.mailing_list.first_name</code>.
     */
    public final TableField<MailingListRecord, String> FIRST_NAME = createField("first_name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.mailing_list.last_name</code>.
     */
    public final TableField<MailingListRecord, String> LAST_NAME = createField("last_name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.mailing_list.created</code>.
     */
    public final TableField<MailingListRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>public.mailing_list.receives_mail</code>.
     */
    public final TableField<MailingListRecord, Boolean> RECEIVES_MAIL = createField("receives_mail", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * Create a <code>public.mailing_list</code> table reference
     */
    public MailingList() {
        this(DSL.name("mailing_list"), null);
    }

    /**
     * Create an aliased <code>public.mailing_list</code> table reference
     */
    public MailingList(String alias) {
        this(DSL.name(alias), MAILING_LIST);
    }

    /**
     * Create an aliased <code>public.mailing_list</code> table reference
     */
    public MailingList(Name alias) {
        this(alias, MAILING_LIST);
    }

    private MailingList(Name alias, Table<MailingListRecord> aliased) {
        this(alias, aliased, null);
    }

    private MailingList(Name alias, Table<MailingListRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> MailingList(Table<O> child, ForeignKey<O, MailingListRecord> key) {
        super(child, key, MAILING_LIST);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MAILING_LIST_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MailingListRecord, Long> getIdentity() {
        return Keys.IDENTITY_MAILING_LIST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MailingListRecord> getPrimaryKey() {
        return Keys.MAILING_LIST_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MailingListRecord>> getKeys() {
        return Arrays.<UniqueKey<MailingListRecord>>asList(Keys.MAILING_LIST_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MailingList as(String alias) {
        return new MailingList(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MailingList as(Name alias) {
        return new MailingList(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MailingList rename(String name) {
        return new MailingList(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MailingList rename(Name name) {
        return new MailingList(name, null);
    }
}
