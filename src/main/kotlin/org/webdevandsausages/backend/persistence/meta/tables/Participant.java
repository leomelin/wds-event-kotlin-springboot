/*
 * This file is generated by jOOQ.
 */
package meta.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import meta.Indexes;
import meta.Keys;
import meta.Public;
import meta.tables.records.ParticipantRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Participant extends TableImpl<ParticipantRecord> {

    private static final long serialVersionUID = 2051949384;

    /**
     * The reference instance of <code>public.participant</code>
     */
    public static final Participant PARTICIPANT = new Participant();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ParticipantRecord> getRecordType() {
        return ParticipantRecord.class;
    }

    /**
     * The column <code>public.participant.id</code>.
     */
    public final TableField<ParticipantRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('participant_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.participant.name</code>.
     */
    public final TableField<ParticipantRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.participant.email</code>.
     */
    public final TableField<ParticipantRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.participant.verification_token</code>.
     */
    public final TableField<ParticipantRecord, String> VERIFICATION_TOKEN = createField("verification_token", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.participant.event_id</code>.
     */
    public final TableField<ParticipantRecord, Long> EVENT_ID = createField("event_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('participant_event_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>public.participant</code> table reference
     */
    public Participant() {
        this(DSL.name("participant"), null);
    }

    /**
     * Create an aliased <code>public.participant</code> table reference
     */
    public Participant(String alias) {
        this(DSL.name(alias), PARTICIPANT);
    }

    /**
     * Create an aliased <code>public.participant</code> table reference
     */
    public Participant(Name alias) {
        this(alias, PARTICIPANT);
    }

    private Participant(Name alias, Table<ParticipantRecord> aliased) {
        this(alias, aliased, null);
    }

    private Participant(Name alias, Table<ParticipantRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Participant(Table<O> child, ForeignKey<O, ParticipantRecord> key) {
        super(child, key, PARTICIPANT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PARTICIPANT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ParticipantRecord, Long> getIdentity() {
        return Keys.IDENTITY_PARTICIPANT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ParticipantRecord> getPrimaryKey() {
        return Keys.PARTICIPANT_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ParticipantRecord>> getKeys() {
        return Arrays.<UniqueKey<ParticipantRecord>>asList(Keys.PARTICIPANT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Participant as(String alias) {
        return new Participant(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Participant as(Name alias) {
        return new Participant(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Participant rename(String name) {
        return new Participant(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Participant rename(Name name) {
        return new Participant(name, null);
    }
}
